
PROCESSOR 16F877A
INCLUDE "P16F877A.INC"	
__CONFIG 0x3731



Char EQU 0x20
DelayCount EQU 0x21


blink3 EQU 0x22 ; for blinking 
BlinkCount  EQU 0x23 ; Counter for blink iterations

digit_flag  EQU 0x24 ; for getting number from user (choose the digit)


num_tenth_digit EQU 0x25 ; used in recive number from user
num_unit_digit  EQU 0x26 ; used in recive number from user

num EQU 0x27 ; used recive number from user

temp EQU 0x28 ; diffrent uses

num2_tenth_digit EQU 0x29 ; same above
num2_unit_digit EQU 0x30 ; samve above 


digit1 EQU 0x31 ; Equivalent of 'first' in ASCII
digit2 EQU 0x32 ; Equivalent of 'seond' in ASCII
digit3 EQU 0x33 ; Equivalent of 'third' in ASCII 
digit4 EQU 0x34 ; Equivalent of 'fourth' in ASCII

digit2_high EQU 0x35
digit1_high EQU 0x36
digit2_low EQU 0x37
digit1_low EQU 0x38

result1 EQU 0x39
result2 EQU 0x40




 code_to_send EQU 0x41 ; send recive purpose 
 
 counter EQU 0x42 ; used in multiplication 
 multiplicand EQU 0x43; used in multiplication 
 
 result_high  EQU 0x44 ; get final result for tenth x num1
 result_low   EQU 0x45 ; get final result for tenth x num1
 result      EQU 0x46 ; ; used in multiplication 
 
 multi_flag EQU 0x47 ; make the multiplication function work while waiting the slave to finish
 
 
high_nibble   EQU 0x48 ; send recive purpose 
low_nibble    EQU 0x49 ; send recive purpose 
full_byte     EQU 0x50 ; send recive purpose 
 
most_significant_digits_slave EQU 0x51 ; used to save multipcation  
low_significant_digits_slave  EQU 0x52 ; used to save multipcation  
 
finish_getting EQU 0x53 ; used in sycnro 
 temp_code EQU 0x54 ;  used 
 
most_significant_digits_master  EQU 0x55 ;   
low_significant_digits_master   EQU 0x56 ;
 

 ; Define register aliases
high_byte   EQU     0x57     ; Assume 0x01 is stored in this register
low_byte    EQU     0x58     ; Assume 0x5F is stored in this register
multiplier  EQU     0x59     ; Multiplier value (10 in decimal)
result_low_2  EQU     0x60     ; Lower byte of the result
result_high_2 EQU     0x61     ; Higher byte of the result

final_result_high EQU     0x63 ; final result of multiplication 
final_result_low  EQU     0x64 ; final result of multiplication 
 
result3 EQU 0x65
result4 EQU 0x66
TEMP EQU 0x67
carry_reg EQU 0x68

HIGH1 EQU 0x69
LOW1  EQU 0x62
; The instructions should start from here
ORG 0x00
GOTO init


ORG 0x04
GOTO ISR




;-------------------------------------------start init --------------------------------------------------------
  init:
		BANKSEL TRISD
		CLRF TRISD   ;define Port d as output
		
		BANKSEL PORTD
		
		
		MOVLW 'A'
		MOVWF Char ; for displying on screen
		
		MOVLW 0x30
		MOVWF num_tenth_digit
		
		MOVLW 0x30
		MOVWF num_unit_digit
		
		
		MOVLW 0x30
		MOVWF num
		
		MOVLW 0x03
		MOVWF blink3
		
		
		MOVLW 0x00
		MOVWF digit_flag
		
		
		
		GOTO start

;-------------------------------------------end init -------------------------------------------------------------



;-------------------------------------------- when the button is clicked ------------------------------------------------
ISR:
		BANKSEL INTCON
		BCF INTCON, INTF
		BSF INTCON, INTE
		
		
		
		
goback_again: 		
		
; TASK
    

    
		 CALL ClearLCD       ; Clear the LCD
		;Print number 1 then on the second row display 0.;;;;;;;;;;;;;;;;;;;;;;;;;;;;


		CALL printNumber1   
		
		BCF 	Select, RS
		MOVLW 	0xC0 ; second row
		CALL 	send
		
		MOVLW '_'  ; 
		BSF Select, RS
		CALL send


		;Print number 1 end ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		
		 
		 ;;;;;;;;;;;;;;;;;;;;;;;;;;Getting the first number;;;;;;;;;;;;;;;;;;;;
		 
		 BCF digit_flag,0   ; make it to the first digit .
		 call get_number ; call the function to take the first tenth value 
		 MOVF temp, W ; moving the return value from the function to tenth
		 MOVWF num_tenth_digit
		 
		 
		 BSF digit_flag,0 ; make the flag for second digit(unit)
		 BCF finish_getting, 0 ; rest flag to reuse the function 
		 call get_number
		 MOVF temp, W ; moving the return value from the function to unit digit 
		 MOVWF num_unit_digit
		 
		 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
		 
		
		 
		; send data for num one . ;;;;;;;;;;;;
		 
		  MOVF  num_tenth_digit, W  
		 ANDLW   0x0F  ; removing the num 3 from hex value of the number 
		 MOVWF code_to_send ; save the value of the number without 3.
		 
		 SWAPF code_to_send
		 
		 MOVF  num_unit_digit, W  
		 ANDLW   0x0F  ; removing the num 3 from hex value of the number 
		 
		 IORWF code_to_send; the number in tenth and units to send.	
		 
		 CALL SEND_DATA
		 
		  BANKSEL PORTB
	          BCF PORTB,1 ; make the slave waiting.  

 
		MOVLW	D'5'	
	        CALL delayXsec   
		call display_number_2  ; Printing the second num on LCD. 
		
		
		;;;;;;;;;;;;;;;;;;;;;;;;;;Getting the second number;;;;;;;;;;;;;;;;;;;;
		 
		 BCF digit_flag,0   ; make it to the first digit .
		 BCF finish_getting, 0 ; rest flag to reuse the function 
		 call get_number ; call the function to take the first tenth value 
		 MOVF temp, W ; moving the return value from the function to tenth
		 MOVWF num2_tenth_digit
		 
		 BSF digit_flag,0 ; make the flag for second digit(unit)
		 BCF finish_getting, 0 ; rest flag to reuse the function 
		 call get_number
		 MOVF temp, W ; moving the return value from the function to unit digit 
		 MOVWF num2_unit_digit
		 
		 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
		 
		  		 
		 ;;;;;;;;;;;;;;;;;;;;;;;Sending the unit digit second number  ;;;;;;;;;;;;;;;
		 
		 BSF multi_flag, 0 ; make the multiplication function work while waiting the slave to finish
		 
		 MOVF  num2_unit_digit, W  
		 MOVWF code_to_send
		 CALL SEND_DATA
		
		 
		
		 
		  BANKSEL PORTB
	          BCF PORTB,1 ; make the slave waiting.  

		 
		 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		 
		 wait_until_values_come_from_slave_most_significat:
		 
		 
		   MOVLW  D'2'	; delay 2 seconds , important for synchronization between master and slave
	           CALL delayXsec   
		   
		   
		   BANKSEL PORTB
		   
		   BTFSS PORTB,2 ; dose the slave want to send the data ? 
		   call RECEIVE_DATA ; yes go recive
		   
		   BTFSS PORTB,2 ; dose the slave want to send the data ? 
		     goto back1
		   
		   
		 
		      
		 goto wait_until_values_come_from_slave_most_significat
		 
		 back1: 
		 
		 MOVF full_byte ,w 
		 MOVWF most_significant_digits_slave
		 
		 
		  ; recive the low bit from slave. 
		  
		  wait_values_come_from_slave_low_significat:
		 
		   MOVLW  D'2'	; delay 2 seconds , important for synchronization between master and slave
	           CALL delayXsec   
		   
		   BANKSEL PORTB
		   
		   BTFSS PORTB,2 ; dose the slave want to send the data ?  
		   call RECEIVE_DATA ; yes go recive
		   
		   BTFSS PORTB,2 ; dose the slave want to send the data ?  
		      goto back2
		    
		    
		 goto wait_values_come_from_slave_low_significat
		 
		 back2: 
		 
		 MOVF full_byte ,w 
		 MOVWF low_significant_digits_slave
		 
		 
		 
		 
		 
		 ; multiply value of master "tenthpart digit * num1 *10 
		 
		  
		
		  MOVF most_significant_digits_master ,W 
		  MOVWF  high_byte ; USED IN MULIT  HEX BY 10 FUNCTION 
		  
		   MOVF low_significant_digits_master ,W 
		  MOVWF  low_byte ; USED IN MULIT  HEX BY 10 FUNCTION 
		  
		  call multi_hex_by_10
		  
		  ; getting the values after * by 10 
		  MOVF result_high_2 ,w 
		  MOVWF most_significant_digits_master
		  
		   MOVF result_low_2 ,w 
		  MOVWF low_significant_digits_master
		  
		  CALL    AddHexValues
		 
		 call print_equal ; this print "=" 
		 
		     ; Initialize hexadecimal value (for example, 0x2A49)
		  MOVf final_result_high, w
		  MOVWF   high_byte
		  MOVf   final_result_low ,w
		  MOVWF   low_byte
		  
		  call get_result_on_lcd 
		  
		  
		  
	      call result_print
	      
	      	MOVLW	D'5'	
               CALL delayXsec
						
	     
		  
		  
		movf digit1 ,w
		BSF Select, RS
		CALL send
		
		movf digit2 ,w
		BSF Select, RS
		CALL send
		
		movf digit3 ,w
		BSF Select, RS
		CALL send
		
		movf digit4 ,w
		BSF Select, RS
		CALL send
		
		
		 MOVLW 0x20
		BSF Select, RS
		CALL send
				
		
		MOVLW 'H'
		BSF Select, RS
		CALL send
			
	        MOVLW 'E'
		BSF Select, RS
		CALL send
			
	        MOVLW 'X'
		BSF Select, RS
		CALL send
		
		  MOVLW 0x20
		BSF Select, RS
		CALL send
					
		MOVLW 'V'
		BSF Select, RS
		CALL send
			

		MOVLW 'A'
		BSF Select, RS
		CALL send
			
		MOVLW 'L'
		BSF Select, RS
		CALL send
		
		MOVLW 'U'
		BSF Select, RS
		CALL send
			
		MOVLW 'E'
		BSF Select, RS
		CALL send
		
		
		
		movf digit1 ,w
		ANDLW 0x0F
		MOVWF digit1
		
		movf digit2 ,w
		ANDLW 0x0F
		MOVWF digit2
		
		
		movf digit3 ,w
		ANDLW 0x0F
		MOVWF digit3
		
		
		movf digit4 ,w
		ANDLW 0x0F
		MOVWF digit4
		
            
	     
	        MOVLW 0x40
		MOVWF HIGH1
	       
		MOVLW 0x96
		MOVWF LOW1
	     
	     
		movf digit1 ,w
		MOVWF counter

		
	     call convert_to_decemal
		
		MOVLW 0x02
		MOVWF HIGH1
	       
		MOVLW 0x56
		MOVWF LOW1
	     
		movf digit2 ,w
		MOVWF counter
		
		call convert_to_decemal
		
		MOVLW 0x00
		MOVWF HIGH1
	       
		MOVLW 0x16
		MOVWF LOW1
	     
		movf digit3 ,w
		MOVWF counter
		
		
	       call convert_to_decemal
		
		MOVLW 0x00
		MOVWF HIGH1
	       
		MOVLW 0x01
		MOVWF LOW1
	     
		movf digit4 ,w
		MOVWF counter	
		call convert_to_decemal
		
		MOVF result1 ,W
		ADDLW 0x30
		MOVWF  result1
		
	        MOVF result2 ,W
		ADDLW 0x30
		MOVWF  result2
		
		MOVF result3 ,W
		ADDLW 0x30
		MOVWF  result3
		
		MOVF result4 ,W
		ADDLW 0x30
		MOVWF  result4
		
		 
		
	       MOVLW	D'15'	
               CALL delayXsec
	       
	        CALL ClearLCD       ; Clear the LCD
		
		call result_print
		
		movf result4 ,w
		BSF Select, RS
		CALL send
		
		movf result3 ,w
		BSF Select, RS
		CALL send
		
		movf result2 ,w
		BSF Select, RS
		CALL send
		
		movf result1 ,w
		BSF Select, RS
		CALL send
		
		
		 MOVLW 0x20
		BSF Select, RS
		CALL send
				
		
		MOVLW 'D'
		BSF Select, RS
		CALL send
			
	        MOVLW 'E'
		BSF Select, RS
		CALL send
			
	        MOVLW 'C'
		BSF Select, RS
		CALL send
		
		  MOVLW 0x20
		BSF Select, RS
		CALL send
					
			
			
			    
	
	 bcf INTCON, INTF ; rest button flag.
	 
	wait_until_go_back:

	 BTFSC INTCON, INTF  ; is the button clicked after finishing? 
	 goto go_to_reset ; then repeat the process go to step 2
	 
	 
	 goto wait_until_go_back
	  
	go_to_reset: 
	
	 bcf finish_getting, 0 ; rest the flag to use it again in future . 
	 bcf multi_flag ,0
	 bcf temp_code, 0
	 bcf multiplicand ,0 
	 bcf counter,0
	 bcf digit_flag,0
	 bcf DelayCount ,0
	 bcf  temp_code ,0 

	 goto goback_again
	     
 	
		

		 
; END TASK


		BANKSEL INTCON
		BSF INTCON, INTE
		
		BANKSEL PORTD

		retfie


;-----------------------------------------------release the button ----------------------------------------------------------



INCLUDE "LCDIS_PORTD.INC" ; To USE LCD ON PORT D




; ----------------------------------------------- main start ---------------------------------------------------------------
start:

		CALL inid   ;initialize LCD

		MOVLW D'3'
  
	    MOVWF BlinkCount ; Initialize blink count to 3
		   
		

; -------------------------------blinking effect start --------------------------------

	
	    BlinkLoop:    
				    CALL ClearLCD       ; Clear the LCD
				    MOVLW D'5' ; 5 x 200 ms = 1000 ms (1 seconds)
				    CALL delayXsec      ; Wait for 1 second
					CALL printWelcome ; Display the welcome and multiplication messages
					MOVLW D'5' ; 5 x 200 ms = 1000 ms (1 seconds)
					CALL delayXsec      ; Wait for 1 second
					DECFSZ BlinkCount, F
				    GOTO BlinkLoop
		
				    CALL ClearLCD       ; Clear the LCD for number 1
				  
			
		
; -------------------------------blinking effect end ------------------------------------		

	
		
	     CALL printNumber1   
		
		BCF 	Select, RS
		MOVLW 	0xC0 ; second row
		CALL 	send
		
		MOVLW '_'  ; 
		BSF Select, RS
		CALL send


		
		;I use RB0 as interrupt
		
		BANKSEL TRISB
		BSF TRISB, TRISB0  ;define B0 in port B as input pin
		
		MOVLW   b'11111101' ; RB1 as output it's (defult 0 ) for signling the slave (co processer )  and RB2 (it's defult 1) is input for get signa from slave.
		ANDWF   TRISB, F
		
		BANKSEL INTCON     
		BSF INTCON, GIE    ;enable interrupt
		BSF INTCON, INTE    ;enable RB0 interrupt
		
		
		
		
		complete_with_result
		
		loop:
		
		
	

		
		GOTO loop


;-------------------------------------------------------------------------- main end ----------------------------------------------------------



; ----------------------------------delay function ------------------------


delayXsec:
    	MOVWF DelayCount

delayloop:
	          BTFSC INTCON, INTF ; IS THE BUTTON IS CLICKE BETWEEN THE TWO SECONDS? 
	          RETURN ; YES! GO BACK 
		  
		  MOVLW D'200'
		  CALL xms
		  DECFSZ  DelayCount,F
		  GOTO delayloop
		  RETURN

; ----------------------------------delay function end  ------------------------




;--------------------------------------------------------------
;	to reset num when it becomes 9
;	
;--------------------------------------------------------------
rest_digit:

MOVLW 0x30
MOVWF num
GOTO back


RETURN

;--------------------------------------------------------------
;	some delay to determine the first number (if the interrupt is 4 second then it is accepted as number 1
;	
;--------------------------------------------------------------





ClearLCD:
	    BCF Select, RS ; Deselect the data register.
	    MOVLW 0x01 ; Command to move cursor to second row
	    CALL send
	    RETURN





first_digit_set_curser: ; Branch to the first_digit_set_curser label if MY_FLAG is clear
		
			; Move to the second row at position 0xC0
			BCF 	Select, RS
			MOVLW 	0xC0 ;cursor
			CALL 	send
			
			GOTO cursor_tenth_digit
			
			RETURN
			
			
			
check_digit_flag:
		
		
		    BTFSS digit_flag,0 ; is we are in the digit 1 ? 
		    GOTO tenth_digit ; Yes! so go to the tenth digit.

		    GOTO unit_digit ; No ! so go to the unit digit (second digit )  .


            RETURN


 ; here we approve the number of the tenth then return it back to the call function 	    
tenth_digit:
 		  
		     BSF finish_getting ,0 
		     
		     MOVLW '_'
		     BSF Select, RS
		     CALL send
		
		     BANKSEL PORTD
		
		     MOVLW	D'15'	
		     CALL delayXsec
		
		     MOVF num, W
		     MOVWF temp
		    
		     MOVLW 0x30
		     MOVWF num 
		     
		     GOTO back
	

 ; here we approve the number of the unit then return it back to the call function 	    
	
unit_digit:

			BSF finish_getting ,0 
			
			CALL ClearLCD       ; Clear the LCD because we finish getting the tenth and the unit , and be ready to next number.
			
			BANKSEL PORTD
			
			
			MOVLW	D'5'	
			CALL delayXsec
			
			
			
			MOVF num, W
		        MOVWF temp
		    
			
		        MOVLW 0x30			
			MOVWF num ; return the value for call 
			 
			GOTO back
		

			
get_number:

		BANKSEL INTCON
		BCF INTCON, INTF ; make the flag of the button is zero. 
		
		;;;;;;;;;;;;;;;;;;;;;;;;;;; For the place of curser on the LCD ;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
		
		btfss digit_flag, 0 ; is we are in the first digit  
		goto first_digit_set_curser        ; yes ? go to second_column_curser which move the curser to the first column.  

		
	                         	; NO! mean move the curser to right to write the second digit (second column) . 

		; Move to the second row at position 0xC0
		BCF 	Select, RS
		MOVLW 	0xC1 ;cursor to (second column)
		CALL 	send     	  

		cursor_tenth_digit:
		
		MOVfW num ; put defult value for first click which is zero 
		BSF Select, RS
	        CALL send
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		
		
		
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;get the value of the number ;;;;;;;;;;;;;;;;;;;;;;;;
		
		 ;delay for two second then check if interrupt occurs if not save the value and disable intterupt

		MOVLW	D'10'	
		CALL delayXsec
	       
		BTFSS INTCON, INTF  ; is the button clicked before 2 seconds ? 
		GOTO check_digit_flag  ;  NO ! then jumb to check_digit_flag , we approve the number
		
		INCF num,F  ; Yes ! then increament the value of num and continue 
	      
	      
		MOVLW 0x3A   ; Load the value "10" to be compared with (binary representation)
		XORWF num, W       ; XOR the contents of W with the value in NUM and store the result in W

		; Now, check if the result in W is zero (meaning the values were equal)
		BTFSC STATUS, Z    ; Branch if Zero flag is set (W != 0)
		GOTO rest_digit     ; Jump if the values are not equal
	      
	      ; Move to the second row at position 0xC0
		 BCF 	Select, RS
	         MOVLW 	0xC0
		 CALL 	send
	     
	       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	       
	       back:
	       
	       BTFSC finish_getting, 0 ; is we decide to choose this number ? 
	       RETURN ; yes then give the number back the function call by w reg
	       
	       goto get_number ; No ! so go back to get number until you choose one.
	       
	       

	       
SEND_DATA:
	  	 	  
	  BANKSEL TRISC
	  MOVLW   0x0F    ; Set lower 4 bits as input (1) and upper 4 bits output (0)
	  MOVWF   TRISC
	  
	  BANKSEL PORTC
	  
	  ; Output the high nybble (3) to PORTC
	  MOVF    code_to_send, W    ; Move temp_code back to W
	  	   
	  ANDLW   0xF0            ; remove the low nibble. 
	  
	  MOVWF   PORTC           ; Output high nybble to PORTC
	  
	  BANKSEL PORTB
	  BSF PORTB,1 ; signaling the slave. 
	  
	  MOVLW	D'1'	
	  CALL delayXsec
	
	 
	  BANKSEL PORTC
	  
	  MOVF    code_to_send, W    ; Move temp_code back to W
	  
	  ; Output the low nybble (1) to PORTC
	  SWAPF   code_to_send           ; Swap nybbles (now W = 0x13)
	  
	  MOVF code_to_send ,w
	  ANDLW   0xF0     ;remove the low
	  MOVWF   PORTC      ; Output low nybble to PORTC
	  
	  wait_until_slave_done:
	  
	  btfsc multi_flag, 0  ; do we send the data of number 2 ? 
	  call tenth_x_num1 ; yes then do multiplication of tenth part while waiting the slave.
	  
	  btfsc multi_flag, 0  ; do we send the data of number 2 ? 
	  call save_data_of_tenth ; yes then do multiplication of tenth part while waiting the slave.
	  
	  btfss PORTB ,2 ; is the slave done ? 
	  RETURN ; yes return back
	  
	
	  
	  goto wait_until_slave_done ; No! wait until it done.
	  
	  
	  
    RETURN	       


  ; here we recive the multiplication from the slave (co processer ) 
  
RECEIVE_DATA:

	     BANKSEL TRISC
	     MOVLW   0x0F    ; Set lower 4 bits as input (1) and upper 4 bits output (0)
	     MOVWF   TRISC
	  
	     BANKSEL PORTC
             BANKSEL PORTC
	     MOVF    PORTC, W       ; Read PORTC
	 
	     ; 0x6E
	     ; 0x06 
	     ; 0x06
	     ; 0x60
	     
	     
	     MOVWF   high_nibble
	     MOVF high_nibble ,w
	     ANDLW 0x0F
	     
	     MOVWF high_nibble
	     SWAPF high_nibble
	      
	  	     		     
	     	     	  	    				    
	      MOVLW	D'1'	
	      CALL delayXsec
	     
	      MOVLW	D'1'	
	      CALL delayXsec
	
	      MOVLW	D'1'	
	      CALL delayXsec
	
	
	     ; Receive the low nibble
	     
	     MOVF    PORTC, W       ; Read PORTC again
	     
	     ;0x0E
	     
	     MOVWF   low_nibble
	     MOVF low_nibble ,w
	     
	     ANDLW 0x0F
	     
	     MOVWF   low_nibble    ; Save the high nibble
	     
	     IORWF high_nibble ; 6E
	     
	     MOVF high_nibble ,w
	     
	     movwf full_byte
	    
	     
	   BANKSEL PORTB 
	   BSF  PORTB ,1  
	  
	   
	   MOVLW	D'2'	
	    CALL delayXsec
	   
	   BCF  PORTB ,1   ; make the slave check again for any future signal.
	    
	  	  	       
    RETURN
	     
	    
 
;;;;;;;;;;;;;;;;;;;;;; master multiply tenth with num 1 while slave work ;;;;;;;;;;;;;;;;;
 
 ; this function just work when all the num1 and num2 are sent to slave.
 
tenth_x_num1: 

	    
	       ;;;;;;;;;convert ascii code which we get to it's  value of hex ;;;;;;;;;;;;;
			 
			 ;exampe -> input  0x34  ->  output 0x04
			 
			 movf num_tenth_digit,w  ; it soterd in ascii here for example 0x34 , in decemal '4' 
			 call funtion_to_get_value_of_hex  ;; converting to it's hex -> 0x04 
			 movf temp , w 
			 movwf num_tenth_digit
			 
			  movf num_unit_digit,w 
			 call funtion_to_get_value_of_hex
			 movf temp , w 
			 movwf num_unit_digit
			 
			 
			 movf num2_tenth_digit,w 
			 call funtion_to_get_value_of_hex
			 movf temp , w 
			 movwf num2_tenth_digit
			 
			 
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		
		
		
		   ; this function it convert the decemal value of the num1 to it's mapped value of hex. 
		   ; exmple -> value in reg1 (tenth)  reg2 (5)  -> 0x01 , 0x05  in decmal "15" then output -> hex value 0x0F  reg result  .
		
			  MOVF    num2_tenth_digit, W  ; Move the value of num2_tenth_digit into the W register
			  BTFSC   STATUS, Z            ; Test if Zero flag is set (which means num2_tenth_digit is zero)
			  goto it_zero
		
			  MOVLW 0x0A       ; Load constant 10 into W
			  
			 ; Perform the multiplication using a loop
			  multiply_loop:
			  ADDWF result, F ; Add num to the result

			  DECFSZ num_tenth_digit, F   ; Decrease num and skip if zero
			  GOTO multiply_loop ; Continue the loop if num is not zero
			  
			  movf num_unit_digit,w 
			  
			  ADDWF result , w 
			  
			  MOVWF result ; here the value of number1 in  exmaple hex 0x0F
		
	
		 it_zero:  
			
			;here we prepare for mulitplication , counter the value of tenth digit num2 , multiplicand the vlaue of hex num1
			
			 movf num2_tenth_digit , w 
			 MOVWF counter    ; Move W to counter for loop control
			 
			 MOVF  result, W  
			 MOVWF multiplicand ; Store the multiplicand
			  
	               call multiply_loop2 ; first argument is counter "3" x "num" return in hex 
		

		
		
		RETURN

    
    
  ; remove the 3 part from the value from registor , and keep the num in decimal 
  
funtion_to_get_value_of_hex: 
			     MOVWF temp
			     ANDLW 0x0F
			     MOVWF temp 
			     RETURN
			         
	 
 		
	
; here we save the mulitiplication of the first number * tenth of  second  number	
save_data_of_tenth:
		    MOVF result_low ,w 
		    MOVWF low_significant_digits_master
		    
		    MOVF result_high ,w 
		    MOVWF most_significant_digits_master
		    BCF multi_flag, 0  ; rest the flag
		    
		  
		     
; counter is the tenth part of the second number , multiplicand is num 1 then we find the multiplication result in result low and result_high.
; we add the first number by counter times . 
multiply_loop2:

	    MOVF    counter, W  ; Move the value of num2_tenth_digit into the W register
	    
	    BTFSC   STATUS, Z            ; Test if Zero flag is set (which means num2_tenth_digit is zero)
	    goto counter0 
			   
	     ; Add multiplicand to result_low, consider carry to result_high
	     MOVF multiplicand, W    ; Get multiplicand
	     ADDWF result_low, F     ; Add to result_low
	     BTFSC STATUS, C         ; Check if there was a carry
	     INCF result_high, F     ; Increment result_high if carry occurred

	     DECF counter, F         ; Decrement the counter
	     MOVF counter, W         ; Check if counter is zero
	     BZ end_multiply         ; If zero, multiplication is done
	     GOTO multiply_loop2      ; Else, continue loop

end_multiply:
	       RETURN 


; handel when the value of tenth of number 2 is zero. 	       
counter0:
	 clrf result_low
	 clrf result_high
	 goto end_multiply
	 

	 
	 
; here we multiply the result from ( tenth * num) * 10	 

multi_hex_by_10:    
    ; Clear result registers
    CLRF    result_low_2
    CLRF    result_high_2

    ; Set multiplier (10) in the temp register
    MOVLW   0x0A
    MOVWF   temp

    ; Multiply
    MOVF    temp, W        ; Move the multiplier to W
    MOVWF   counter              ; Initialize the counter with the multiplier

MULTIPLY_LOOP:
    MOVF    low_byte, W  ; Move the low byte of multiplicand to W
    ADDWF   result_low_2, F       ; Add it to the low byte of the product
    BTFSC   STATUS, C            ; Check if there was a carry
    INCF    result_high_2, F      ; If so, increment the high byte of the product

    MOVF    high_byte, W ; Move the high byte of multiplicand to W
    ADDWF   result_high_2, F      ; Add it to the high byte of the product

    DECFSZ  counter, F           ; Decrement the counter
    GOTO    MULTIPLY_LOOP        ; Repeat the loop if counter is not zero

    ; The result is now in product_high:product_low
  
        return             ; Return from function
	
         
; here we find the final result of slave mutiplication and master , and store them in two regsieters final_result_high ,final_result_low. 

AddHexValues:
	  MOVF    low_significant_digits_slave , W      ; Get second low byte
	  ADDWF   low_significant_digits_master, W       ; Add to first low byte
	  MOVWF   final_result_low         ; Store result in result_low
	  BTFSC   STATUS, C          ; Check for carry from low byte addition
	  INCF    most_significant_digits_slave, F     ; Increment second high byte if carry occurred

	  MOVF    most_significant_digits_slave, W     ; Get second high byte
	  ADDWF   most_significant_digits_master, W      ; Add to first high byte, including any carry from low bytes
	  MOVWF   final_result_high        ; Store result in result_high
	
	  RETURN
    


   
  ; here we take each digit of the final result of multiplication  to display on lcd .
  
 get_result_on_lcd:
	     ; Convert high_byte to two ASCII characters
	     MOVF    high_byte, W
	     CALL    ConvertToASCII
	     MOVWF   digit2               ; Store first ASCII digit
	     SWAPF   high_byte, W
	     CALL    ConvertToASCII
	     MOVWF   digit1             ; Store second ASCII digit

	     ; Convert low_byte to two ASCII characters
	     MOVF    low_byte, W
	     CALL    ConvertToASCII
	     MOVWF   digit4            ; Store third ASCII digit
	     SWAPF   low_byte, W
	     CALL    ConvertToASCII
	     MOVWF   digit3              ; Store fourth ASCII digit

	     ; Continue with the rest of the program...

  

  ; here we take the right value of acsii code of the result digits. 
ConvertToASCII:
  		 
		ANDLW   0x0F 
		movwf temp
		 		 
		MOVLW   0x09            ; Load 0x09 into W
		 
		SUBWF   temp , W        ; Subtract 0x09 from 'value', result in W
		
		BTFSC   STATUS, Z           ; Check if the result is zero
		MOVLW   0x39                ; If zero, prepare '9' ASCII to return
		
		BTFSC   STATUS, Z  
		  goto done
		  
		BTFSC   STATUS, C       ; Check for borrow (negative result)  
		goto handel_AF
		 
		

		movf temp,w 
		            ; Isolate a single hex digit.
		ADDLW   0x30                ; Initially add ASCII value of '0' to convert 0-9 to ASCII.
		
		RETURN

		handel_AF:
		movf temp,w 
		
		ADDLW   0x37               
		
	done: 	

    RETURN

 
convert_to_decemal: 
 ; Initialize values for HIGH1:LOW1 and HIGH2:LOW2 to 0x4096




; Isolate and store digits for HIGH1:LOW1
movf LOW1, w
andlw 0x0F
movwf digit1_low 

movf LOW1, w
andlw 0xF0
movwf digit2_low
SWAPF digit2_low

movf HIGH1, w
andlw 0x0F
movwf digit1_high

movf HIGH1, w
andlw 0xF0
movwf digit2_high
SWAPF digit2_high


looop:

; Adjust for BCD addition
; Add digit1 and digit1_low2
movf digit1_low, w
addwf result1 , w
movwf TEMP         ; Move result to TEMP
call AdjustForBCD
movwf result1

; Add digit2 and digit2_low2
movf digit2_low, w
addwf carry_reg , w
clrf carry_reg
addwf result2 , w
movwf TEMP         ; Move result to TEMP
call AdjustForBCD
movwf result2

; Add digit1_high and digit1_high2
movf digit1_high, w
addwf carry_reg , w
clrf carry_reg
addwf result3 , w
movwf TEMP         ; Move result to TEMP
call AdjustForBCD
movwf result3

; Add digit2_high and digit2_high2
movf digit2_high, w
addwf carry_reg , w
clrf carry_reg
addwf result4 , w
movwf TEMP         ; Move result to TEMP
call AdjustForBCD
movwf result4




DECFSZ counter, f   ; Decrement counter and skip if zero
GOTO looop           ; If counter is not zero, repeat the loop

return 


AdjustForBCD:
    sublw 0x09         ; Compare with 9
    movf TEMP , w
    BTFSS   STATUS, C       ; Check for borrow (negative result)  
    addlw 0x06         ; Else, add 6 for BCD adjustment
    movwf temp   
    
    BTFSS   STATUS, C       ; Check for borrow (negative result) 
    incf carry_reg
    
     
    andlw 0x0F
    movwf temp
    
NoAdjust:
    return 
   
   
display_number_2:
				
				
				
				MOVLW 'X'
			        BSF Select, RS
			        CALL send
				
			      	MOVLW	D'10'	
		                CALL delayXsec
						
				CALL ClearLCD       ; Clear the LCD
				
				CALL printNumber2   ;print NUMBER1 to LCD
				
			        BCF Select, RS
				MOVLW 	0xC0 ; second row
				CALL 	send
				  
				MOVLW '_'  ; 
				BSF Select, RS
			        CALL send
				
				loop_until_click_button:
				
				BTFSC INTCON, INTF ; IS THE BUTTON IS CLICKED NOW ?   
	                        RETURN ; YES! GO BACK 
				
				goto loop_until_click_button ; NO! then wait until it clicked.
				
				 
				
			
				





;PRINT AREA ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; ----------------------------------- print welcome -----------------------------
 printWelcome:
  
				; Print "WELCOME" on the first row
				MOVLW 'W'
				BSF Select, RS
				CALL send
				
				MOVLW 'E'
				BSF Select, RS
				CALL send
				
				MOVLW 'L'
				BSF Select, RS
				CALL send
				
				MOVLW 'C'
				BSF Select, RS
				CALL send
				
				MOVLW 'O'
				BSF Select, RS
				CALL send
				
				MOVLW 'M'
				BSF Select, RS
				CALL send
				
				MOVLW 'E'
				BSF Select, RS
				CALL send
				
				
				MOVLW 0x20
				BSF Select, RS
				CALL send
				
				MOVLW 'T'
				BSF Select, RS
				CALL send
				
				
				MOVLW 'O'
				BSF Select, RS
				CALL send
				
				
				; Move to the second row at position 0xC0
				BCF 	Select, RS
				MOVLW 	0xC0
				CALL 	send
				
				; Print "MULTIPLICATION" on the second row
				MOVLW 'M'
				BSF Select, RS
				CALL send
				
				MOVLW 'U'
				BSF Select, RS
				CALL send
				
				MOVLW 'L'
				BSF Select, RS
				CALL send
				
				MOVLW 'T'
				BSF Select, RS
				CALL send
				
				MOVLW 'I'
				BSF Select, RS
				CALL send
				
				MOVLW 'P'
				BSF Select, RS
				CALL send
				
				MOVLW 'L'
				BSF Select, RS
				CALL send
				
				MOVLW 'I'
				BSF Select, RS
				CALL send
				
				MOVLW 'C'
				BSF Select, RS
				CALL send
				
				MOVLW 'A'
				BSF Select, RS
				CALL send
				
				MOVLW 'T'
				BSF Select, RS
				CALL send
				
				MOVLW 'I'
				BSF Select, RS
				CALL send
				
				MOVLW 'O'
				BSF Select, RS
				CALL send
				
				MOVLW 'N'
				BSF Select, RS
				CALL send
				
				MOVLW 0x10
				CALL delayXsec


				RETURN
; ----------------------------------- print welcom end -----------------------------


; -----------------------------------  Print Number1   ------------------------------
printNumber1:
			
			MOVLW 'N'
			BSF Select, RS
			CALL send
			
			MOVLW 'U'
			BSF Select, RS
			CALL send
			
			MOVLW 'M'
			BSF Select, RS
			CALL send
			
			MOVLW 'B'
			BSF Select, RS
			CALL send
			
			MOVLW 'E'
			BSF Select, RS
			CALL send
			
			MOVLW 'R'
			BSF Select, RS
			CALL send
			
			MOVLW 0x20
			BSF Select, RS
			CALL send
			
			MOVLW 0x31
			BSF Select, RS
			CALL send


RETURN

; -----------------------------------  Print end   ----------------------------------


; -----------------------------------  Print Number2   ------------------------------
printNumber2:

				MOVLW 'N'
				BSF Select, RS
				CALL send
				
				MOVLW 'U'
				BSF Select, RS
				CALL send
				
				MOVLW 'M'
				BSF Select, RS
				CALL send
				
				MOVLW 'B'
				BSF Select, RS
				CALL send
				
				MOVLW 'E'
				BSF Select, RS
				CALL send
				
				MOVLW 'R'
				BSF Select, RS
				CALL send
				
				MOVLW 0x20
				BSF Select, RS
				CALL send
				
				MOVLW 0x32
				BSF Select, RS
				CALL send


RETURN

; -----------------------------------  Print Number2 end   ------------------------------

print_equal:

		    MOVLW	D'10'	 ; delay 2 seconds
		    CALL delayXsec 
			
			CALL ClearLCD       ; Clear the LCD
			
			MOVLW 0x3D
			BSF Select, RS
			CALL send

		        MOVLW	D'10'	; delay 2 seconds
			CALL delayXsec   

				BCF 	Select, RS
			MOVLW 	0xC0 ; second row
			CALL 	send
			
			
		
			RETURN  ; return to the main 


			
result_print: 
	     
	              CALL ClearLCD       ; Clear the LCD
	     
	     		MOVLW 'R'
			BSF Select, RS
			CALL send
			
			MOVLW 'E'
			BSF Select, RS
			CALL send
			
			MOVLW 'S'
			BSF Select, RS
			CALL send
			
			MOVLW 'U'
			BSF Select, RS
			CALL send
			
			MOVLW 'L'
			BSF Select, RS
			CALL send
			
			MOVLW 'T'
			BSF Select, RS
			CALL send
			
			MOVLW 0x20
			BSF Select, RS
			CALL send
			
			BCF 	Select, RS
			MOVLW 	0xC0 ; second row
			CALL 	send
		
	RETURN	

END

